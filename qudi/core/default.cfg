#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

gui:
    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        image_axes_padding: 0.02
        default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic

    camera_gui:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: camera_logic

    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: laser_logic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplot_gui:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        connect:
            qdplot_logic: 'qdplot_logic'

logic:
    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 20  # optional (10Hz by default)
        calc_digital_freq: True  # optional (True by default)
        connect:
            streamer: nicard_6343_instreamer

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        max_history_length: 10
        max_scan_update_interval: 2
        position_update_interval: 1
        connect:
            scanner: scanner_dummy

    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        max_history_length: 10
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: 'camera_dummy'

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        query_interval: 0.1
        connect:
            laser: 'laser_dummy'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'microwave_dummy'
            data_scanner: 'finite_sampling_input_dummy'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        watchdog_interval: 1
        autostart_watchdog: True
        connect:
            switch: 'switch_interfuse'

    switch_interfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: 'switch1_dummy'
            switch2: 'switch2_dummy'
        extend_hardware_name: True

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            pulsegenerator: 'pulser_dummy'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'
        #additional_extraction_path:
        #additional_analysis_path:
        connect:
            fastcounter: 'fast_counter_dummy'
            microwave: 'cw_microwave_dummy'
            pulsegenerator: 'pulser_dummy'

    odmr_scanner_interfuse:
        module.Class: 'interfuse.odmr_scanner_finite_sampling_interfuse.OdmrScannerFiniteSamplingInterfuse'
        power_channel: 'Power'
        frequency_channel: 'Frequency'
        connect:
            odmr_sampler: 'odmr_scanner_dummy'
            power_setter: 'cw_microwave_dummy'

    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

hardware:
    cw_microwave_dummy:
        module.Class: 'dummy.microwave_dummy.CwMicrowaveDummy'

    odmr_scanner_dummy:
        module.Class: 'dummy.microwave_dummy.OdmrScannerDummy'

    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        digital_channels:  # optional, must provide at least one digital or analog channel
            - 'digital 1'
            - 'digital 2'
            - 'digital 3'
        analog_channels:  # optional, must provide at least one digital or analog channel
            - 'analog 1'
            - 'analog 2'
        digital_event_rates:  # optional, must have as many entries as digital_channels or just one
            - 1000
            - 10000
            - 100000
        # digital_event_rates: 100000
        analog_amplitudes:  # optional, must have as many entries as analog_channels or just one
            - 5
            - 10
        # analog_amplitudes: 10  # optional (10V by default)

    nicard_6343_instreamer:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI7'
        analog_sources:  # optional
            - 'ai0'
            - 'ai1'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional


    scanner_dummy:
        module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
        position_ranges:
            'x': [0, 200e-6]
            'y': [0, 200e-6]
            'z': [-100e-6, 100e-6]
        frequency_ranges:
            'x': [0, 10000]
            'y': [0, 10000]
            'z': [0, 5000]
        resolution_ranges:
            'x': [2, 2147483647]
            'y': [2, 2147483647]
            'z': [2, 2147483647]
        position_accuracy:
            'x': 10e-9
            'y': 10e-9
            'z': 50e-9
        spot_density: 1e11

    camera_dummy:
        module.Class: 'dummy.camera_dummy.CameraDummy'

    laser_dummy:
        module.Class: 'dummy.simple_laser_dummy.SimpleLaserDummy'

    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
        simulation_mode: 'ODMR'
        sample_rate_limits: [1, 1e6]
        frame_size_limits: [1, 1e9]
        channel_units:
            'APD counts': 'c/s'
            'Photodiode': 'V'

    finite_sampling_output_dummy:
        module.Class: 'dummy.finite_sampling_output_dummy.FiniteSamplingOutputDummy'
        sample_rate_limits: [1, 1e6]
        frame_size_limits: [1, 1e9]
        output_mode: 'JUMP_LIST'
        channel_units:
            'Frequency': 'Hz'
            'Voltage': 'V'

    finite_sampling_io_dummy:
        module.Class: 'dummy.finite_sampling_io_dummy.FiniteSamplingIODummy'
        sample_rate_limits: [1, 1e6]
        frame_size_limits: [1, 1e9]
        default_output_mode: 'JUMP_LIST'
        output_channel_units:
            'Frequency': 'Hz'
            'Voltage': 'V'
        input_channel_units:
            'APD counts': 'c/s'
            'Photodiode': 'V'

    switch1_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        name: 'First'  # optional
        remember_states: True  # optional
        switches:
            one: ['down', 'up']
            two: ['down', 'up']
            three: ['low', 'middle', 'high']

    switch2_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        name: 'Second'  # optional
        remember_states: True  # optional
        switches:
            'An even longer name of the switch itself':
                - 'Very long name of a random state'
                - 'Another very long name of a random state'
    fast_counter_dummy:
        module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
        gated: False

    pulser_dummy:
        module.Class: 'dummy.pulser_dummy.PulserDummy'
        force_sequence_option: False
