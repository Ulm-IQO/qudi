# Config file for a simple simulation of the core functions: Confocal, counter,
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

<<<<<<< HEAD
    # Devices are defined in another config file:
    #hardware: readConfigFile('devices.cfg')
    remoteport: 12345
=======
    module_server:
        address: 'localhost'
        port: 12345
>>>>>>> 775c223f83e2713d48ee1c82090b647336271ae9

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
<<<<<<< HEAD
=======

    simpledatadummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

>>>>>>> 775c223f83e2713d48ee1c82090b647336271ae9
    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fit.fitlogic'

    mydummygatedcounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        clock_channel: '/Dev1/Ctr0'
        clock_frequency: 100
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI8'
        photon_source2: '/Dev1/PFI9'
        gate_in_channel: '/Dev1/PFI4'
        count_distribution: 'uniform'
        remoteaccess:

    mykrowave:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20
        mock: True

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fit.fitlogic'

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'


    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy'


    xzmotor:
        module.Class: 'motor.motor_nova.NOVATwoAxisStage'
        motor_type_label:
          -
            - 'HWTYPE NDMS1'
            - 'x-axis'
          -
            - 'HWTYPE NDMS1'
            - 'z-axis'

    ymotor:
        module.Class: 'motor.motor_stage_micos_one.MotorStageMicosOne'
        com_port_micos: ['COM4',  'y-axis']
        micos_term_chars: '\r'
        micos_baud_rate: 57600

    nanomax:
        module.Class:  'motor.nanomax_thorlabs.NanomaxStage'
        com_port_nano_xyz: 'COM4'
        nano_xyz_term_chars: '\r'
        nano_xyz_baud_rate: 115200
        nano_xyz_timeout: 1


    mynicard:
        module.Class: 'ni_card_no_A0.SlowNICard'
        clock_channel: '/Dev1/Ctr0'
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI0'
        gate_in_channel: '/Dev1/PFI9'
        counting_edge_rising: True
        clock_frequency: 100               # in Hz
#        x_range: 0, 200                    # in micrometer
#        y_range: 0, 200                    # in micrometer
#        z_range: -100, 100                 # in micrometer
#        a_range: 0, 200                    # 4th unused analog output of NI
#        voltage_range: -10, 10             # in volts
        samples_number: 10                 # for gated counting

logic:
    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counter:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mynicard.slowcounter1'
            savelogic: 'save.savelogic'

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'
<<<<<<< HEAD
=======
        #overhead_bytes: 4294967296  Not properly implemented yet
        #additional_methods_dir: 'C:\\Custom_dir\\Methods' optional

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'

    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'mydummyfastcounter'
            pulseanalysislogic: 'pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulsegenerator: 'mydummypulser'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'microwave_dummy'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter'
            savelogic: 'savelogic'
>>>>>>> 775c223f83e2713d48ee1c82090b647336271ae9

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummygatedcounter.counter'
            savelogic: 'save.savelogic'

    scanner:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'confocal_scanner_motor_interfuse.motorscanner'
            savelogic: 'save.savelogic'

    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'confocal_scanner_motor_interfuse.motorscanner'
            fitlogic: 'fit.fitlogic'

    poimanager:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scanner.scannerlogic'
            optimizer1: 'optimizer.optimizerlogic'
            savelogic: 'save.savelogic'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'counter.counterlogic'
            savelogic: 'save.savelogic'
            fitlogic: 'fit.fitlogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
<<<<<<< HEAD
            odmrcounter: 'mydummyodmrcounter.odmrcounter'
            fitlogic: 'fit.fitlogic'
            microwave1: 'mykrowave.mwsourcedummy'
            savelogic: 'save.savelogic'
            taskrunner: 'task.runner'
    fit:
=======
            odmrcounter: 'mydummyodmrcounter'
            fitlogic: 'fitlogic'
            microwave1: 'microwave_dummy'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
    odmr_counter_microwave_interfuse:
        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
        connect:
            slowcounter: 'mydummycounter'
            microwave: 'microwave_dummy'

    # this oder logic runs now with the interfuse
    odmrlogic2:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_microwave_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_microwave_interfuse'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'


    laserscannerlogic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'mydummyscanner'
            savelogic: 'savelogic'

    fitlogic:
>>>>>>> 775c223f83e2713d48ee1c82090b647336271ae9
        module.Class: 'fit_logic.FitLogic'

    save:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'

    task:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
        #     scannerLocationRefocus:
        #        module: 'refocus'
        #        preposttasks: ['fliplasermirror']
        #        pausetasks: ['scan', 'odmr']
        #        needsmodules:
        #            optimizer: 'optimizer'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]


    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_xz_y_interfuse.MagnetMotorXZYInterfuse'
        connect:
            motorstage_xz: 'xzmotor.novamotor'
            motorstage_y: 'ymotor.motorstage'


    confocal_scanner_motor_interfuse:
        module.Class: 'interfuse.confocal_scanner_motor_interfuse.ConfocalScannerMotorInterfuse'
        connect:
            magnetinterface: 'magnet_motor_interfuse.magnetstage'
            confocalscanner1: 'mynicard.slowcounter1'
            fitlogic: 'fit.fitlogic'


    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnet_motor_interfuse.magnetstage'
            optimizerlogic: 'optimizer.optimizerlogic'
            counterlogic: 'counter.counterlogic'
            odmrlogic: 'odmrlogic.odmrlogic'
            savelogic: 'save.savelogic'
            scannerlogic: 'scanner.scannerlogic'
            traceanalysis: 'trace_analysis_logic.traceanalysislogic1'
            gatedcounterlogic: 'gatedcounterlogic.counterlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic.sequencegenerator'
         #fluorescence_integration_time: 5e-3

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'
    man:
        module.Class: 'manager.managergui.ManagerGui'

    countergui:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counter.counterlogic'

    confocalgui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scanner.scannerlogic'
            savelogic: 'save.savelogic'
            optimizerlogic1: 'optimizer.optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    poimanagergui:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanager.poimanagerlogic'
            confocallogic1: 'scanner.scannerlogic'


    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
<<<<<<< HEAD
            magnetlogic1: 'magnet_logic.magnetlogic'
            savelogic: 'save.savelogic'
=======
            magnetlogic1: 'magnet_logic'
            savelogic: 'savelogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'
        text: 'Random text from config'
        error: 'This config is required!'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplotlogic'

    nuclearops:
        module.Class: 'nuclear_operations.nuclear_operations.NuclearOperationsGui'
        connect:
            nuclearoperationslogic: 'nuopslogic'
            savelogic: 'savelogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'


    externalpulseextraction:
        module.Class: 'pulsed.pulsed_extraction_external_gui.PulsedExtractionExternalGui'
        connect:
            pulsedextractionexternallogic1: 'pulsedextractionexternallogic'

    laserscanner:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'
            savelogic: 'savelogic'

    # Gui to test the dummy counting
    odmrgui_program_trigger:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic2'
            savelogic: 'savelogic'
>>>>>>> 775c223f83e2713d48ee1c82090b647336271ae9
