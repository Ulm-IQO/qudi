#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray'] # 'tasklogic'

    module_server:
        address: 'localhost'
        port: 5800

    remote_server:
        address: 'localhost'
        port: 5800


    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    awg:
        #module.Class: 'awg.tektronix_awg70k.AWG70K'
        #awg_ip_address: '192.168.1.63'
        #awg_visa_address: 'TCPIP0::192.168.1.63::inst0::INSTR'
        #default_sample_rate: 50e9  # in Samples/seconds
        #awg_ftp_path: 'C:/inetpub/ftproot' # this path cannot be retrieved otherwise.
        #ftp_root_dir: 'C:/inetpub/ftproot' # this path cannot be retrieved otherwise.
        #ftp_login: 'OEM'
        #ftp_passwd: 'quantuM2015'

        #module.Class: 'awg.keysight_M8195A_new.AWGM8195A'
        module.Class: 'awg.keysight_m819x.AWGM8195A'
        awg_visa_address: 'TCPIP0::localhost::hislip0::INSTR'
        #awg_visa_address: 'TCPIP0::169.254.1.0::5025::SOCKET'
        #pulsed_file_dir: 'C:\\Software\\pulsed_files'
        awg_mode: 'MARK'
        sample_rate_div: 1

    nicard_6343:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
            - '/Dev1/PFI1'
        clock_channel: '/Dev1/Ctr0'
        default_clock_frequency: 100 # optional, in Hz
        counter_channels:
            - '/Dev1/Ctr1'
        counter_ai_channels:
            - '/Dev1/AI0'
            - '/Dev1/AI1'
            - '/Dev1/AI2'
        counter_voltage_range: [0, 5]
        default_scanner_clock_frequency: 100 # optional, in Hz
        scanner_clock_channel: '/Dev1/Ctr2'
        pixel_clock_channel: '/Dev1/PFI6'
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
            - '/Dev1/AO3'
        scanner_ai_channels:
            - '/Dev1/AI0'
            - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        scanner_voltage_ranges:
            - [-10, 10]
            - [-10, 10]
            - [-10, 10]
            - [-10, 10]
        scanner_ai_voltage_ranges:
            - [-5, 5]
            - [-5, 5]
        scanner_position_ranges:
            - [0e-6, 200e-6]
            - [0e-6, 200e-6]
            - [-100e-6, 100e-6]
            - [-10, 10]
        odmr_trigger_channel: '/Dev1/PFI7'
        gate_in_channel: '/Dev1/PFI9'
        default_samples_number: 50
        max_counts: 3e7
        read_write_timeout: 10
        counting_edge_rising: True
        odmr_trigger_line: 'Dev1/port0/line0'
        odmr_switch_line: 'Dev1/port0/line1'

    MW_SMIQ:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB1::10::INSTR'
        gpib_timeout: 20

    ni_slowcounter:
        module.Class: 'ni_x_series_counter.NationalInstrumentsXSeriesCounter'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI1'
        analog_sources:  # optional
            - 'AI0'
            - 'AI1'
            - 'AI2'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        # adc_voltage_range: [-10e-3, 10e-3]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional

    fastcounter_pico:
        module.Class: 'picoscope_rapid_block_measurement.PicoscopeRapidBlockMeasurement'
        gated: False
        resolution_bit: 15
        timebase_ix: 4
        pre_trigger_samples: 0
        post_trigger_samples: 60
        ds_mode_ix_analog: 0
        ds_binning_analog: 1
        ds_mode_ix_digital: 0
        ds_binning_digital: 1
        ncaptures: 100000
        trigger_channel: '1'
        trigger_level: 10000
        channel_a_range: '5V'
        channel_a_offset: 0.0 # -0.8
        channel_b_range: '500mV'
        channel_b_offset: -0.4
        laser_referencing: False
        default_record_length_s: 9e-6



    simpledatadummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    mydummyinstreamer:
        module.Class: 'data_instream_dummy.InStreamDummy'
        digital_channels:  # optional, must provide at least one digital or analog channel
            - 'digital 1'
            - 'digital 2'
            - 'digital 3'
        analog_channels:  # optional, must provide at least one digital or analog channel
            - 'analog 1'
            - 'analog 2'
        digital_event_rates:  # optional, must have as many entries as digital_channels or just one
            - 10
            - 1000
            - 10000
        analog_amplitudes:  # optional, must have as many entries as analog_channels or just one
            - 5
            - 10

    mydummycounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        source_channels: 4
        clock_frequency: 100
        count_distribution: 'dark_bright_poisson'
        remoteaccess: True

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        number_of_channels: 3
        connect:
            fitlogic: 'fitlogic'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False



    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    mydummywavemeter:
        module.Class: 'wavemeter_dummy.WavemeterDummy'
        measurement_timing: 10

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    myspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        connect:
            fitlogic: 'fitlogic'

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'

    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy'

    processdummy:
        module.Class: 'process_dummy.ProcessDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

    cameradummy:
        module.Class: 'camera.camera_dummy.CameraDummy'
logic:
    timeserieslogic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 20
        connect:
            _streamer_con: 'mydummyinstreamer'
            _savelogic_con: 'savelogic'

    simpledatalogic:
        module.Class: 'simple_data_logic.SimpleDataLogic'
        connect:
            simpledata: 'simpledatadummy'

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'processdummy'
            control: 'processdummy'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        # additional_predefined_methods_path: 'C:\\qudi\\logic\\pulsed\\predefined_generate_methods'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'awg'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        additional_extraction_path: 'C:\\qudi\\logic\\pulsed\\pulse_extraction_methods'  # optional
        additional_analysis_path: 'C:\\qudi\\logic\\pulsed\\pulsed_analysis_methods'  # optional
        connect:
            fastcounter: 'fastcounter_pico'
            pulsegenerator: 'awg'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'microwave_dummy'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard_6343' #'ni_slowcounter'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter'
            savelogic: 'savelogic'

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter'
            savelogic: 'savelogic'
            counterlogic: 'counterlogic'
            fitlogic: 'fitlogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1'
            switch2: 'mydummyswitch2'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mydummyscanner'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimiserlogic: 'optimizerlogic'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'nicard_6343' # 'mydummyodmrcounter'
            fitlogic: 'fitlogic'
            microwave1: 'MW_SMIQ'# 'microwave_dummy'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
    odmr_counter_microwave_interfuse:
        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
        connect:
            slowcounter: 'nicard_6343'#'mydummycounter'
            microwave: 'MW_SMIQ' # 'microwave_dummy'

    # this oder logic runs now with the interfuse
    odmrlogic2:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_microwave_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_microwave_interfuse'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'


    laserscannerlogic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'mydummyscanner'
            savelogic: 'savelogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'
        #additional_fit_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'myspectrometer'
            savelogic: 'savelogic'
            odmrlogic: 'odmrlogic' # optional
            fitlogic: 'fitlogic'

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnetdummy'
            optimizerlogic: 'optimizerlogic'
            counterlogic: 'counterlogic'
            odmrlogic: 'odmrlogic'
            savelogic: 'savelogic'
            scannerlogic: 'scannerlogic'
            traceanalysis: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            motorstage: 'motordummy'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    qdplotlogic:
        module.Class: 'qdplot_logic.QDPlotLogic'
        default_plot_number: 3
        connect:
            save_logic: 'savelogic'
            fit_logic: 'fitlogic'

    nuopslogic:
        module.Class: 'nuclear_operations_logic.NuclearOperationsLogic'
        connect:
            sequencegenerationlogic: 'sequencegeneratorlogic'
            traceanalysislogic: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            odmrlogic: 'odmrlogic'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laserdummy'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            hardware: 'cameradummy'
            savelogic: 'savelogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    timeseries:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        connect:
            _time_series_logic_con: 'timeserieslogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    wavemeterlogger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterloggerlogic'
            savelogic: 'savelogic'

    switches:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    simpledata:
        module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
        connect:
            simplelogic: 'simpledatalogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic'
            savelogic: 'savelogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'
        text: 'Random text from config'
        error: 'This config is required!'

    qdplotter:
        module.Class: 'qdplotter.qdplotter_gui.QDPlotterGui'
        pen_color_list: ['b', 'y', 'm', 'g']
        connect:
            qdplot_logic: 'qdplotlogic'


    nuclearops:
        module.Class: 'nuclear_operations.nuclear_operations.NuclearOperationsGui'
        connect:
            nuclearoperationslogic: 'nuopslogic'
            savelogic: 'savelogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    laserscanner:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'
            savelogic: 'savelogic'

    # Gui to test the dummy counting
    odmrgui_program_trigger:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic2'
            savelogic: 'savelogic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'
