#  Example ACQ4 configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015. 
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName

startup:
    gui:
        tray:
            module.Class: 'trayicon.TrayIcon'
        man:
            module.Class: 'manager.managergui.ManagerGui'

# Devices are defined in another config file:
#hardware: readConfigFile('devices.cfg') 

hardware:
    mykrowave:
        module.Class: 'microwave.mw_source_dummy.mwsourcedummy'
        gpib_address: 'dummy'
        gpib_timeout: 20
        mock: True
    mydummyscanner:
        module.Class: 'confocal_scanner_interface_dummy.ConfocalScannerInterfaceDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fit.fitlogic'
    mydummycounter:
        module.Class: 'slow_counter_interface_dummy.SlowCounterInterfaceDummy'
        clock_channel: '/Dev1/Ctr0'
        clock_frequency: 100
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI8'
        remoteaccess: True
    mydummyodmrcounter:
        module.Class: 'odmr_counter_interface_dummy.ODMRCounterInterfaceDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fit.fitlogic'
    mydummyfastcounter:
        module.Class: 'fast_counter_interface_dummy.FastCounterInterfaceDummy'
    pulsegenerator:
        module.Class: 'pulser_interface_dummy.PulserInterfaceDummy'
    mydummywavemeter:
        module.Class: 'wavemeter_interface_dummy.WavemeterInterfaceDummy'
        measurement_timing: 10

    mydummyswitch1:
        module.Class: 'laserswitch.laser_switch_interface_dummy.LaserSwitchInterfaceDummy'
    mydummyswitch2:
        module.Class: 'laserswitch.laser_switch_interface_dummy.LaserSwitchInterfaceDummy'

    myspectrometer:
        module.Class: 'spectrometer_dummy.SpectrometerInterfaceDummy'
        connect:
            fitlogic: 'fit.fitlogic'

#    fastcounter:
#        module.Class: 'picoquant.picoharp300.PicoHarp300'
#        deviceID: 0
#        mode:   0
#    microwaveSMR20:
#        module.Class: 'microwave.mw_source_smr20.MWSourceSMR20'
#    mypulseblaster:
#        module.Class: 'spincore.pulse_blaster_esrpro.PulseBlasterESRPRO'
#    mynicard:
#        module.Class: 'ni_card.NICard'
#        clock_channel: '/Dev2/Ctr0'
#        counter_channel: '/Dev2/Ctr1'
#        scanner_clock_channel: '/Dev2/Ctr2'
#        scanner_counter_channel: '/Dev2/Ctr3'
#        photon_source: '/Dev2/PFI8'
#        gate_in_channel: '/Dev2/PFI9'
#        odmr_trigger_channel: '/Dev2/PFI13'
#        counting_edge_rising: True
#        scanner_ao_channels: '/Dev2/AO0:3'
#        clock_frequency: 100               # in Hz
#        scanner_clock_frequency: 100       # in Hz
#        x_range: 0, 200                    # in micrometer
#        y_range: 0, 200                    # in micrometer
#        z_range: -100, 100                 # in micrometer
#        a_range: 0, 200                    # 4th unused analog output of NI
#        voltage_range: -10, 10             # in volts
#        samples_number: 10                 # for gated counting
        
logic:
    kernellogic:
        module.Class: 'ipython_notebook_logic.NotebookLogic'
    sequencegenerator:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'

    pulseextraction:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'
        connect:
            fastcounter: 'mydummyfastcounter.fastcounter'

    pulseanalysis:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'
        connect:
            fastcounter: 'mydummyfastcounter.fastcounter'
            pulseextractionlogic: 'pulseextraction.pulseextractionlogic'
            pulsegenerator: 'pulsegenerator.pulsegenerator'
            fitlogic: 'fit.fitlogic'
            savelogic: 'save.savelogic'

    counter:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter.counter'
            savelogic: 'save.savelogic'

    laserscanner:
        module.Class: 'laser_scanning_logic.LaserScanningLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter.highhinessewavemeter'
            savelogic: 'save.savelogic'
            counterlogic: 'counter.counterlogic'

    laserswitch:
        module.Class: 'laser_switch_logic.LaserSwitchLogic'
        connect:
            switch1: 'mydummyswitch1.switch'
            switch2: 'mydummyswitch2.switch'

    scanner:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'mydummyscanner.confocalscanner'
            savelogic: 'save.savelogic'

    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'mydummyscanner.confocalscanner'
            fitlogic: 'fit.fitlogic'
            scannerlogic: 'scanner.scannerlogic'

    poimanager:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scanner.scannerlogic'
            optimizer1: 'optimizer.optimizerlogic'
            savelogic: 'save.savelogic'

    odmr:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'mydummyodmrcounter.odmrcounter'
            fitlogic: 'fit.fitlogic'
            microwave1: 'mykrowave.mwsourcedummy'
            savelogic: 'save.savelogic'

    fit:
        module.Class: 'fit_logic.FitLogic'
    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            dummytask:
                module: 'dummy'
            dummyinterruptor:
                module: 'dummy'
                pausetasks: ['dummy']
                preposttasks: ['ppdummy']
            ppdummy:
                module: 'prepostdummy'
#            scannerLocationRefocus:
#                module: 'refocus'
#                preposttasks: ['fliplasermirror']
#                pausetasks: ['scan', 'odmr']
#                needsmodules:
#                    optimizer: 'optimizerlogic'
#            fliplasermirror:
#                module: 'flipmirror'
#                needsmodules:
#                    switchlogic: 'laserswitch'
    save:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: '/$HOME/'

    spectrum:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'myspectrometer.spec'
            savelogic: 'save.savelogic'
            odmrlogic1: 'odmr.odmrlogic'


gui:
    countergui:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counter.counterlogic'
    confocalgui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scanner.scannerlogic'
            savelogic: 'save.savelogic'
            optimizerlogic1: 'optimizer.optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
    laserscanninggui:
        module.Class: 'laserscanner.laserscangui.LaserScanningGui'
        connect:
            laserscanninglogic1: 'laserscanner.laserscanninglogic'
            savelogic: 'save.savelogic'
    laserswitchgui:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            laserswitchlogic: 'laserswitch.laserswitchlogic'
    poimanagergui:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanager.poimanagerlogic'
            confocallogic1: 'scanner.scannerlogic'
    odmrgui:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmr.odmrlogic'
            savelogic: 'save.savelogic'
    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_measurement_gui.PulsedMeasurementGui'
        connect:
            pulseanalysislogic: 'pulseanalysis.pulseanalysislogic'
            sequencegeneratorlogic: 'sequencegenerator.sequencegenerator'
    taskgui:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic.runner'
    spectrometergui:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic1: 'spectrum.spectrumlogic'


global:
    remoteport: 12345
    ## For controlling the appearance of the GUI:
    stylesheet: 'darkorange.qss'
