#  Example QuDi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']

    remoteport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    simpledummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    mykrowave:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20
        mock: True

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic.fitlogic'

    mydummycounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        clock_channel: '/Dev1/Ctr0'
        clock_frequency: 100
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI8'
        photon_source2: '/Dev1/PFI9'
        count_distribution: 'dark_bright_poisson'
        remoteaccess: True

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic.fitlogic'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    mydummywavemeter:
        module.Class: 'wavemeter_dummy.WavemeterDummy'
        measurement_timing: 10

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    myspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        connect:
            fitlogic: 'fitlogic.fitlogic'

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'

    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy'

    processdummy:
        module.Class: 'process_dummy.ProcessDummy'

logic:
    simplelogic:
        module.Class: 'simple_data_logic.SimpleDataLogic'
        connect:
            simpledata: 'simpledummy.simple'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            process: 'processdummy.dummy'
            control: 'processdummy.dummy'
            savelogic: 'savelogic.savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'
        connect:
            pulser: 'mydummypulser.pulser'

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'
        connect:
            fastcounter: 'mydummyfastcounter.fastcounter'

    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'
        connect:
            pulseextractionlogic: 'pulseextractionlogic.pulseextractionlogic'
            fitlogic: 'fitlogic.fitlogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'mydummyfastcounter.fastcounter'
            pulseanalysislogic: 'pulseanalysislogic.pulseanalysislogic'
            pulsegenerator: 'mydummypulser.pulser'
            fitlogic: 'fitlogic.fitlogic'
            savelogic: 'savelogic.savelogic'
            scannerlogic: 'scannerlogic.scannerlogic'
            optimizer1: 'optimizerlogic.optimizerlogic'
            microwave: 'mykrowave.mwsourcedummy'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter.counter'
            savelogic: 'savelogic.savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter.counter'
            savelogic: 'savelogic.savelogic'

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter.highhinessewavemeter'
            savelogic: 'savelogic.savelogic'
            counterlogic: 'counterlogic.counterlogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1.switch'
            switch2: 'mydummyswitch2.switch'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'mydummyscanner.confocalscanner'
            savelogic: 'savelogic.savelogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'mydummyscanner.confocalscanner'
            fitlogic: 'fitlogic.fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic.scannerlogic'
            optimizer1: 'optimizerlogic.optimizerlogic'
            savelogic: 'savelogic.savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'mydummyodmrcounter.odmrcounter'
            fitlogic: 'fitlogic.fitlogic'
            microwave1: 'mykrowave.mwsourcedummy'
            savelogic: 'savelogic.savelogic'
            taskrunner: 'tasklogic.runner'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic.runner'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: '/$HOME/'

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'myspectrometer.spec'
            savelogic: 'savelogic.savelogic'
            odmrlogic1: 'odmrlogic.odmrlogic'

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnetdummy.magnetstage'
            optimizerlogic: 'optimizerlogic.optimizerlogic'
            counterlogic: 'counterlogic.counterlogic'
            odmrlogic: 'odmrlogic.odmrlogic'
            savelogic: 'savelogic.savelogic'
            scannerlogic: 'scannerlogic.scannerlogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            motorstage: 'motordummy.motorstage'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic.counterlogic'
            savelogic: 'savelogic.savelogic'
            fitlogic: 'fitlogic.fitlogic'

    qdplot:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic.savelogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic.counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic.scannerlogic'
            savelogic: 'savelogic.savelogic'
            optimizerlogic1: 'optimizerlogic.optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    #notebookgui:
    #    module.Class: 'notebook.notebookgui.NotebookWebView'

    wavemeterlogger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterloggerlogic.wavemeterloggerlogic'
            savelogic: 'savelogic.savelogic'

    switches:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            switchlogic: 'switchlogic.switchlogic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic.poimanagerlogic'
            confocallogic1: 'scannerlogic.scannerlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic.odmrlogic'
            savelogic: 'savelogic.savelogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic.runner'

    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic.automationlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic1: 'spectrumlogic.spectrumlogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulseanalysislogic: 'pulseanalysislogic.pulseanalysislogic'
            pulsedmeasurementlogic: 'pulsedmeasurementlogic.pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic.sequencegenerator'
            savelogic: 'savelogic.savelogic'

    simpledata:
        module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
        connect:
            simplelogic: 'simplelogic.simplelogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic.magnetlogic'
            savelogic: 'savelogic.savelogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic.counterlogic'
            traceanalysislogic1: 'trace_analysis_logic.traceanalysislogic1'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic.pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplot.qdplotlogic'

