# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import pulse_streamer_pb2 as pulse__streamer__pb2


class PulseStreamerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.constant = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/constant',
        request_serializer=pulse__streamer__pb2.PulseMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.stream = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/stream',
        request_serializer=pulse__streamer__pb2.SequenceMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.startNow = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/startNow',
        request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.setTrigger = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/setTrigger',
        request_serializer=pulse__streamer__pb2.TriggerMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.isRunning = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/isRunning',
        request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.hasSequence = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/hasSequence',
        request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )
    self.getUnderflow = channel.unary_unary(
        '/pulse_streamer.PulseStreamer/getUnderflow',
        request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
        response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
        )


class PulseStreamerServicer(object):

  def constant(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def startNow(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setTrigger(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isRunning(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def hasSequence(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getUnderflow(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PulseStreamerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'constant': grpc.unary_unary_rpc_method_handler(
          servicer.constant,
          request_deserializer=pulse__streamer__pb2.PulseMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'stream': grpc.unary_unary_rpc_method_handler(
          servicer.stream,
          request_deserializer=pulse__streamer__pb2.SequenceMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'startNow': grpc.unary_unary_rpc_method_handler(
          servicer.startNow,
          request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'setTrigger': grpc.unary_unary_rpc_method_handler(
          servicer.setTrigger,
          request_deserializer=pulse__streamer__pb2.TriggerMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'isRunning': grpc.unary_unary_rpc_method_handler(
          servicer.isRunning,
          request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'hasSequence': grpc.unary_unary_rpc_method_handler(
          servicer.hasSequence,
          request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
      'getUnderflow': grpc.unary_unary_rpc_method_handler(
          servicer.getUnderflow,
          request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
          response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pulse_streamer.PulseStreamer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
